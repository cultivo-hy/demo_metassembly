# Makefile.in generated by automake 1.13 from Makefile.am.
# Unittest/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2012 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



am__make_dryrun = \
  { \
    am__dry=no; \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
      *) \
        for am__flg in $$MAKEFLAGS; do \
          case $$am__flg in \
            *=*|--*) ;; \
            *n*) am__dry=yes; break;; \
          esac; \
        done;; \
    esac; \
    test $$am__dry = yes; \
  }
pkgdatadir = $(datadir)/abyss
pkgincludedir = $(includedir)/abyss
pkglibdir = $(libdir)/abyss
pkglibexecdir = $(libexecdir)/abyss
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
check_PROGRAMS = common_stringutil$(EXEEXT) common_histogram$(EXEEXT) \
	common_bitutil$(EXEEXT) common_kmer$(EXEEXT) \
	common_sequence$(EXEEXT) common_KmerIterator$(EXEEXT) \
	common_sam$(EXEEXT) BloomFilter$(EXEEXT) \
	Konnector_DBGBloom$(EXEEXT) \
	Konnector_DBGBloomAlgorithms$(EXEEXT) \
	graph_ConstrainedBFSVisitor$(EXEEXT) \
	graph_BidirectionalBFS$(EXEEXT) graph_AllPathsSearch$(EXEEXT) \
	graph_HashGraph$(EXEEXT) \
	graph_ConstrainedBidiBFSVisitor$(EXEEXT) \
	graph_ExtendPath$(EXEEXT) graph_DotIO$(EXEEXT) \
	graph_UndirectedGraph$(EXEEXT) Konnector_konnector$(EXEEXT) \
	DBG_LoadAlgorithm$(EXEEXT) $(am__EXEEXT_1) \
	BloomDBG_BloomDBG$(EXEEXT) BloomDBG_RollingHash$(EXEEXT) \
	BloomDBG_RollingHashIterator$(EXEEXT) \
	BloomDBG_HashAgnosticCascadingBloom$(EXEEXT) \
	BloomDBG_RollingBloomDBG$(EXEEXT) BloomDBG_MaskedKmer$(EXEEXT) \
	BloomDBG_SpacedSeed$(EXEEXT)
am__append_1 = PairedDBG_LoadAlgorithm \
	PairedDBG_KmerPair PairedDBG_Dinuc \
	PairedDBG_BranchRecord
subdir = Unittest
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(top_srcdir)/depcomp $(top_srcdir)/test-driver
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/m4_ax_pthread.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = PairedDBG_LoadAlgorithm$(EXEEXT) \
	PairedDBG_KmerPair$(EXEEXT) \
	PairedDBG_Dinuc$(EXEEXT) \
	PairedDBG_BranchRecord$(EXEEXT)
am__dirstamp = $(am__leading_dot)dirstamp
am_BloomDBG_BloomDBG_OBJECTS =  \
	BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.$(OBJEXT)
BloomDBG_BloomDBG_OBJECTS = $(am_BloomDBG_BloomDBG_OBJECTS)
BloomDBG_BloomDBG_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
BloomDBG_BloomDBG_LINK = $(CXXLD) $(BloomDBG_BloomDBG_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_BloomDBG_HashAgnosticCascadingBloom_OBJECTS = BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.$(OBJEXT)
BloomDBG_HashAgnosticCascadingBloom_OBJECTS =  \
	$(am_BloomDBG_HashAgnosticCascadingBloom_OBJECTS)
BloomDBG_HashAgnosticCascadingBloom_LDADD = $(LDADD)
BloomDBG_HashAgnosticCascadingBloom_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
BloomDBG_HashAgnosticCascadingBloom_LINK = $(CXXLD) \
	$(BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am_BloomDBG_MaskedKmer_OBJECTS = BloomDBG/MaskedKmerTest.$(OBJEXT)
BloomDBG_MaskedKmer_OBJECTS = $(am_BloomDBG_MaskedKmer_OBJECTS)
BloomDBG_MaskedKmer_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
am_BloomDBG_RollingBloomDBG_OBJECTS = BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.$(OBJEXT)
BloomDBG_RollingBloomDBG_OBJECTS =  \
	$(am_BloomDBG_RollingBloomDBG_OBJECTS)
BloomDBG_RollingBloomDBG_DEPENDENCIES =  \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
BloomDBG_RollingBloomDBG_LINK = $(CXXLD) \
	$(BloomDBG_RollingBloomDBG_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am_BloomDBG_RollingHash_OBJECTS = BloomDBG/RollingHashTest.$(OBJEXT)
BloomDBG_RollingHash_OBJECTS = $(am_BloomDBG_RollingHash_OBJECTS)
BloomDBG_RollingHash_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_BloomDBG_RollingHashIterator_OBJECTS =  \
	BloomDBG/RollingHashIteratorTest.$(OBJEXT)
BloomDBG_RollingHashIterator_OBJECTS =  \
	$(am_BloomDBG_RollingHashIterator_OBJECTS)
BloomDBG_RollingHashIterator_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_BloomDBG_SpacedSeed_OBJECTS = BloomDBG/SpacedSeedTest.$(OBJEXT)
BloomDBG_SpacedSeed_OBJECTS = $(am_BloomDBG_SpacedSeed_OBJECTS)
BloomDBG_SpacedSeed_LDADD = $(LDADD)
BloomDBG_SpacedSeed_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
am_BloomFilter_OBJECTS = Konnector/BloomFilter-BloomFilter.$(OBJEXT)
BloomFilter_OBJECTS = $(am_BloomFilter_OBJECTS)
BloomFilter_DEPENDENCIES = $(top_builddir)/Common/libcommon.a $(LDADD)
BloomFilter_LINK = $(CXXLD) $(BloomFilter_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am_DBG_LoadAlgorithm_OBJECTS =  \
	DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.$(OBJEXT)
DBG_LoadAlgorithm_OBJECTS = $(am_DBG_LoadAlgorithm_OBJECTS)
DBG_LoadAlgorithm_DEPENDENCIES =  \
	$(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
DBG_LoadAlgorithm_LINK = $(CXXLD) $(DBG_LoadAlgorithm_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_Konnector_DBGBloom_OBJECTS =  \
	Konnector/Konnector_DBGBloom-DBGBloomTest.$(OBJEXT)
Konnector_DBGBloom_OBJECTS = $(am_Konnector_DBGBloom_OBJECTS)
Konnector_DBGBloom_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
Konnector_DBGBloom_LINK = $(CXXLD) $(Konnector_DBGBloom_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am_Konnector_DBGBloomAlgorithms_OBJECTS = Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.$(OBJEXT)
Konnector_DBGBloomAlgorithms_OBJECTS =  \
	$(am_Konnector_DBGBloomAlgorithms_OBJECTS)
Konnector_DBGBloomAlgorithms_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
Konnector_DBGBloomAlgorithms_LINK = $(CXXLD) \
	$(Konnector_DBGBloomAlgorithms_CXXFLAGS) $(CXXFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
am_Konnector_konnector_OBJECTS =  \
	Konnector/Konnector_konnector-konnectorTest.$(OBJEXT)
Konnector_konnector_OBJECTS = $(am_Konnector_konnector_OBJECTS)
Konnector_konnector_DEPENDENCIES = $(top_builddir)/Align/libalign.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
Konnector_konnector_LINK = $(CXXLD) $(Konnector_konnector_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am__PairedDBG_BranchRecord_SOURCES_DIST =  \
	PairedDBG/BranchRecordTest.cpp
am_PairedDBG_BranchRecord_OBJECTS = PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.$(OBJEXT)
PairedDBG_BranchRecord_OBJECTS = $(am_PairedDBG_BranchRecord_OBJECTS)
PairedDBG_BranchRecord_DEPENDENCIES =  \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
PairedDBG_BranchRecord_LINK = $(CXXLD) \
	$(PairedDBG_BranchRecord_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am__PairedDBG_Dinuc_SOURCES_DIST = PairedDBG/DinucTest.cc
am_PairedDBG_Dinuc_OBJECTS = PairedDBG/PairedDBG_Dinuc-DinucTest.$(OBJEXT)
PairedDBG_Dinuc_OBJECTS = $(am_PairedDBG_Dinuc_OBJECTS)
PairedDBG_Dinuc_DEPENDENCIES =  \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
PairedDBG_Dinuc_LINK = $(CXXLD) $(PairedDBG_Dinuc_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am__PairedDBG_KmerPair_SOURCES_DIST = PairedDBG/KmerPairTest.cc
am_PairedDBG_KmerPair_OBJECTS = PairedDBG/PairedDBG_KmerPair-KmerPairTest.$(OBJEXT)
PairedDBG_KmerPair_OBJECTS = $(am_PairedDBG_KmerPair_OBJECTS)
PairedDBG_KmerPair_DEPENDENCIES =  \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
PairedDBG_KmerPair_LINK = $(CXXLD) $(PairedDBG_KmerPair_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
am__PairedDBG_LoadAlgorithm_SOURCES_DIST =  \
	PairedDBG/LoadAlgorithmTest.cpp
am_PairedDBG_LoadAlgorithm_OBJECTS = PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.$(OBJEXT)
PairedDBG_LoadAlgorithm_OBJECTS =  \
	$(am_PairedDBG_LoadAlgorithm_OBJECTS)
PairedDBG_LoadAlgorithm_DEPENDENCIES =  \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
PairedDBG_LoadAlgorithm_LINK = $(CXXLD) \
	$(PairedDBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
am_common_KmerIterator_OBJECTS = Common/KmerIteratorTest.$(OBJEXT)
common_KmerIterator_OBJECTS = $(am_common_KmerIterator_OBJECTS)
common_KmerIterator_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
am_common_bitutil_OBJECTS = Common/BitUtilTest.$(OBJEXT)
common_bitutil_OBJECTS = $(am_common_bitutil_OBJECTS)
common_bitutil_LDADD = $(LDADD)
common_bitutil_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
am_common_histogram_OBJECTS = Common/HistogramTest.$(OBJEXT)
common_histogram_OBJECTS = $(am_common_histogram_OBJECTS)
common_histogram_LDADD = $(LDADD)
common_histogram_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
am_common_kmer_OBJECTS = Common/KmerTest.$(OBJEXT)
common_kmer_OBJECTS = $(am_common_kmer_OBJECTS)
common_kmer_DEPENDENCIES = $(top_builddir)/Common/libcommon.a $(LDADD)
am_common_sam_OBJECTS = Common/SAM.$(OBJEXT)
common_sam_OBJECTS = $(am_common_sam_OBJECTS)
common_sam_DEPENDENCIES = $(top_builddir)/Common/libcommon.a $(LDADD)
am_common_sequence_OBJECTS = Common/Sequence.$(OBJEXT)
common_sequence_OBJECTS = $(am_common_sequence_OBJECTS)
common_sequence_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
am_common_stringutil_OBJECTS = Common/StringUtilTest.$(OBJEXT)
common_stringutil_OBJECTS = $(am_common_stringutil_OBJECTS)
common_stringutil_LDADD = $(LDADD)
common_stringutil_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
am_graph_AllPathsSearch_OBJECTS =  \
	Graph/graph_AllPathsSearch-AllPathsSearchTest.$(OBJEXT)
graph_AllPathsSearch_OBJECTS = $(am_graph_AllPathsSearch_OBJECTS)
graph_AllPathsSearch_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_graph_BidirectionalBFS_OBJECTS =  \
	Graph/graph_BidirectionalBFS-BidirectionalBFSTest.$(OBJEXT)
graph_BidirectionalBFS_OBJECTS = $(am_graph_BidirectionalBFS_OBJECTS)
graph_BidirectionalBFS_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_graph_ConstrainedBFSVisitor_OBJECTS = Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.$(OBJEXT)
graph_ConstrainedBFSVisitor_OBJECTS =  \
	$(am_graph_ConstrainedBFSVisitor_OBJECTS)
graph_ConstrainedBFSVisitor_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_graph_ConstrainedBidiBFSVisitor_OBJECTS = Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.$(OBJEXT)
graph_ConstrainedBidiBFSVisitor_OBJECTS =  \
	$(am_graph_ConstrainedBidiBFSVisitor_OBJECTS)
graph_ConstrainedBidiBFSVisitor_DEPENDENCIES =  \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_graph_DotIO_OBJECTS = Graph/graph_DotIO-DotIOTest.$(OBJEXT)
graph_DotIO_OBJECTS = $(am_graph_DotIO_OBJECTS)
graph_DotIO_DEPENDENCIES = $(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a $(LDADD)
am_graph_ExtendPath_OBJECTS =  \
	Graph/graph_ExtendPath-ExtendPathTest.$(OBJEXT)
graph_ExtendPath_OBJECTS = $(am_graph_ExtendPath_OBJECTS)
graph_ExtendPath_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
am_graph_HashGraph_OBJECTS =  \
	Graph/graph_HashGraph-HashGraphTest.$(OBJEXT)
graph_HashGraph_OBJECTS = $(am_graph_HashGraph_OBJECTS)
graph_HashGraph_DEPENDENCIES = $(top_builddir)/Common/libcommon.a \
	$(LDADD)
am_graph_UndirectedGraph_OBJECTS =  \
	Graph/UndirectedGraphTest.$(OBJEXT)
graph_UndirectedGraph_OBJECTS = $(am_graph_UndirectedGraph_OBJECTS)
graph_UndirectedGraph_LDADD = $(LDADD)
graph_UndirectedGraph_DEPENDENCIES =  \
	$(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(BloomDBG_BloomDBG_SOURCES) \
	$(BloomDBG_HashAgnosticCascadingBloom_SOURCES) \
	$(BloomDBG_MaskedKmer_SOURCES) \
	$(BloomDBG_RollingBloomDBG_SOURCES) \
	$(BloomDBG_RollingHash_SOURCES) \
	$(BloomDBG_RollingHashIterator_SOURCES) \
	$(BloomDBG_SpacedSeed_SOURCES) $(BloomFilter_SOURCES) \
	$(DBG_LoadAlgorithm_SOURCES) $(Konnector_DBGBloom_SOURCES) \
	$(Konnector_DBGBloomAlgorithms_SOURCES) \
	$(Konnector_konnector_SOURCES) \
	$(PairedDBG_BranchRecord_SOURCES) $(PairedDBG_Dinuc_SOURCES) \
	$(PairedDBG_KmerPair_SOURCES) \
	$(PairedDBG_LoadAlgorithm_SOURCES) \
	$(common_KmerIterator_SOURCES) $(common_bitutil_SOURCES) \
	$(common_histogram_SOURCES) $(common_kmer_SOURCES) \
	$(common_sam_SOURCES) $(common_sequence_SOURCES) \
	$(common_stringutil_SOURCES) $(graph_AllPathsSearch_SOURCES) \
	$(graph_BidirectionalBFS_SOURCES) \
	$(graph_ConstrainedBFSVisitor_SOURCES) \
	$(graph_ConstrainedBidiBFSVisitor_SOURCES) \
	$(graph_DotIO_SOURCES) $(graph_ExtendPath_SOURCES) \
	$(graph_HashGraph_SOURCES) $(graph_UndirectedGraph_SOURCES)
DIST_SOURCES = $(BloomDBG_BloomDBG_SOURCES) \
	$(BloomDBG_HashAgnosticCascadingBloom_SOURCES) \
	$(BloomDBG_MaskedKmer_SOURCES) \
	$(BloomDBG_RollingBloomDBG_SOURCES) \
	$(BloomDBG_RollingHash_SOURCES) \
	$(BloomDBG_RollingHashIterator_SOURCES) \
	$(BloomDBG_SpacedSeed_SOURCES) $(BloomFilter_SOURCES) \
	$(DBG_LoadAlgorithm_SOURCES) $(Konnector_DBGBloom_SOURCES) \
	$(Konnector_DBGBloomAlgorithms_SOURCES) \
	$(Konnector_konnector_SOURCES) \
	$(am__PairedDBG_BranchRecord_SOURCES_DIST) \
	$(am__PairedDBG_Dinuc_SOURCES_DIST) \
	$(am__PairedDBG_KmerPair_SOURCES_DIST) \
	$(am__PairedDBG_LoadAlgorithm_SOURCES_DIST) \
	$(common_KmerIterator_SOURCES) $(common_bitutil_SOURCES) \
	$(common_histogram_SOURCES) $(common_kmer_SOURCES) \
	$(common_sam_SOURCES) $(common_sequence_SOURCES) \
	$(common_stringutil_SOURCES) $(graph_AllPathsSearch_SOURCES) \
	$(graph_BidirectionalBFS_SOURCES) \
	$(graph_ConstrainedBFSVisitor_SOURCES) \
	$(graph_ConstrainedBidiBFSVisitor_SOURCES) \
	$(graph_DotIO_SOURCES) $(graph_ExtendPath_SOURCES) \
	$(graph_HashGraph_SOURCES) $(graph_UndirectedGraph_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
TEST_EXTENSIONS =  .test
LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.test.log=.log)
TEST_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
TEST_LOG_COMPILE = $(TEST_LOG_COMPILER) $(AM_TEST_LOG_FLAGS) \
	$(TEST_LOG_FLAGS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ubuntu/abyss-2.0.2/missing aclocal-1.13
AMTAR = $${TAR-tar}

# -Wno-error is used here because there is no portable way
# to suppress warning: "argument unused during compilation: '-pthread'"
# for clang on OSX.
# See: http://stackoverflow.com/questions/17841140/os-x-clang-pthread
AM_CXXFLAGS = -Wall -Wextra $(PTHREAD_CFLAGS) -Wno-error
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} /home/ubuntu/abyss-2.0.2/missing autoconf
AUTOHEADER = ${SHELL} /home/ubuntu/abyss-2.0.2/missing autoheader
AUTOMAKE = ${SHELL} /home/ubuntu/abyss-2.0.2/missing automake-1.13
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = -I/home/ubuntu/abyss-2.0.2      -isystem/home/ubuntu/abyss-2.0.2/boost_1_56_0
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GHC = 
GHC_PKG = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS =    
LIBOBJS = 
LIBS = -ldl -lm 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/ubuntu/abyss-2.0.2/missing makeinfo
MKDIR_P = /bin/mkdir -p
MPI_LIBS = -lmpi 
OBJEXT = o
OPENMP_CXXFLAGS = -fopenmp
PACKAGE = abyss
PACKAGE_BUGREPORT = abyss-users@bcgsc.ca
PACKAGE_NAME = ABySS
PACKAGE_STRING = ABySS 2.0.2
PACKAGE_TARNAME = abyss
PACKAGE_URL = http://www.bcgsc.ca/platform/bioinfo/software/abyss
PACKAGE_VERSION = 2.0.2
PANDOC = 
PATH_SEPARATOR = :
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
SQLITE_LIBS = -ldl -lm 
STRIP = 
VERSION = 2.0.2
abs_builddir = /home/ubuntu/abyss-2.0.2/Unittest
abs_srcdir = /home/ubuntu/abyss-2.0.2/Unittest
abs_top_builddir = /home/ubuntu/abyss-2.0.2
abs_top_srcdir = /home/ubuntu/abyss-2.0.2
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ubuntu/abyss-2.0.2/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AM_LDFLAGS = $(PTHREAD_LIBS)
AM_CPPFLAGS = \
	-DGTEST_USE_OWN_TR1_TUPLE=0 \
	-I$(top_srcdir) \
	-I$(top_srcdir)/lib/gtest-1.7.0/include

LDADD = $(top_builddir)/lib/gtest-1.7.0/libgtest_main.a
common_stringutil_SOURCES = Common/StringUtilTest.cpp
common_histogram_SOURCES = Common/HistogramTest.cpp
common_bitutil_SOURCES = Common/BitUtilTest.cpp
common_kmer_SOURCES = Common/KmerTest.cpp
common_kmer_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
common_sequence_SOURCES = Common/Sequence.cc
common_sequence_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
common_KmerIterator_SOURCES = Common/KmerIteratorTest.cpp
common_KmerIterator_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
common_sam_SOURCES = Common/SAM.cc
common_sam_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
BloomFilter_SOURCES = Konnector/BloomFilter.cc
BloomFilter_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
BloomFilter_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
BloomFilter_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
Konnector_DBGBloom_SOURCES = Konnector/DBGBloomTest.cpp
Konnector_DBGBloom_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
Konnector_DBGBloom_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
Konnector_DBGBloom_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
Konnector_DBGBloomAlgorithms_SOURCES = Konnector/DBGBloomAlgorithmsTest.cpp
Konnector_DBGBloomAlgorithms_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
Konnector_DBGBloomAlgorithms_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
Konnector_DBGBloomAlgorithms_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_ConstrainedBFSVisitor_SOURCES = Graph/ConstrainedBFSVisitorTest.cpp
graph_ConstrainedBFSVisitor_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_ConstrainedBFSVisitor_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_BidirectionalBFS_SOURCES = Graph/BidirectionalBFSTest.cpp
graph_BidirectionalBFS_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_BidirectionalBFS_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_AllPathsSearch_SOURCES = Graph/AllPathsSearchTest.cpp
graph_AllPathsSearch_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_AllPathsSearch_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_HashGraph_SOURCES = Graph/HashGraphTest.cpp
graph_HashGraph_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_HashGraph_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_ConstrainedBidiBFSVisitor_SOURCES = \
	Graph/ConstrainedBidiBFSVisitorTest.cpp

graph_ConstrainedBidiBFSVisitor_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_ConstrainedBidiBFSVisitor_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_ExtendPath_SOURCES = Graph/ExtendPathTest.cpp
graph_ExtendPath_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_ExtendPath_LDADD = $(top_builddir)/Common/libcommon.a $(LDADD)
graph_DotIO_SOURCES = Graph/DotIOTest.cpp
graph_DotIO_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
graph_DotIO_LDADD = \
	$(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

graph_UndirectedGraph_SOURCES = Graph/UndirectedGraphTest.cpp
Konnector_konnector_SOURCES = \
	Konnector/konnectorTest.cpp

Konnector_konnector_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
Konnector_konnector_LDADD = \
	$(top_builddir)/Align/libalign.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

Konnector_konnector_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
DBG_LoadAlgorithm_SOURCES = \
	DBG/LoadAlgorithmTest.cpp

DBG_LoadAlgorithm_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_srcdir)/DataLayer \
	-I$(top_srcdir)/Common

DBG_LoadAlgorithm_LDADD = \
	$(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

DBG_LoadAlgorithm_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
PairedDBG_LoadAlgorithm_SOURCES = \
	PairedDBG/LoadAlgorithmTest.cpp

PairedDBG_LoadAlgorithm_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_srcdir)/DataLayer \
	-I$(top_srcdir)/Common

PairedDBG_LoadAlgorithm_LDADD = \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/Assembly/libassembly.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

PairedDBG_LoadAlgorithm_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
PairedDBG_KmerPair_SOURCES = \
	PairedDBG/KmerPairTest.cc

PairedDBG_KmerPair_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_srcdir)/DataLayer \
	-I$(top_srcdir)/Common

PairedDBG_KmerPair_LDADD = \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

PairedDBG_KmerPair_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
PairedDBG_Dinuc_SOURCES = \
	PairedDBG/DinucTest.cc

PairedDBG_Dinuc_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_srcdir)/DataLayer \
	-I$(top_srcdir)/Common

PairedDBG_Dinuc_LDADD = \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

PairedDBG_Dinuc_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
PairedDBG_BranchRecord_SOURCES = \
	PairedDBG/BranchRecordTest.cpp

PairedDBG_BranchRecord_CPPFLAGS = \
	$(AM_CPPFLAGS) \
	-I$(top_srcdir)/DataLayer \
	-I$(top_srcdir)/Common

PairedDBG_BranchRecord_LDADD = \
	$(top_builddir)/PairedDBG/libpaireddbg.a \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

PairedDBG_BranchRecord_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
BloomDBG_BloomDBG_SOURCES = BloomDBG/BloomDBGTest.cpp
BloomDBG_BloomDBG_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_srcdir)/Common
BloomDBG_BloomDBG_CXXFLAGS = $(AM_CXXFLAGS) $(OPENMP_CXXFLAGS)
BloomDBG_BloomDBG_LDADD = \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

BloomDBG_RollingHash_SOURCES = BloomDBG/RollingHashTest.cpp
BloomDBG_RollingHash_LDADD = \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

BloomDBG_RollingHashIterator_SOURCES = BloomDBG/RollingHashIteratorTest.cpp
BloomDBG_RollingHashIterator_LDADD = \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

BloomDBG_HashAgnosticCascadingBloom_SOURCES = \
	BloomDBG/HashAgnosticCascadingBloomTest.cpp

BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS = $(AM_CXXFLAGS) \
	$(OPENMP_CXXFLAGS)

BloomDBG_RollingBloomDBG_SOURCES = BloomDBG/RollingBloomDBGTest.cpp
BloomDBG_RollingBloomDBG_CXXFLAGS = $(AM_CXXFLAGS) \
	$(OPENMP_CXXFLAGS)

BloomDBG_RollingBloomDBG_LDADD = \
	$(top_builddir)/DataLayer/libdatalayer.a \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

BloomDBG_MaskedKmer_SOURCES = BloomDBG/MaskedKmerTest.cpp
BloomDBG_MaskedKmer_LDADD = \
	$(top_builddir)/Common/libcommon.a \
	$(LDADD)

BloomDBG_SpacedSeed_SOURCES = BloomDBG/SpacedSeedTest.cpp
TESTS = $(check_PROGRAMS)
all: all-am

.SUFFIXES:
.SUFFIXES: .cc .cpp .log .o .obj .test .test$(EXEEXT) .trs
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Unittest/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Unittest/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
BloomDBG/$(am__dirstamp):
	@$(MKDIR_P) BloomDBG
	@: > BloomDBG/$(am__dirstamp)
BloomDBG/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) BloomDBG/$(DEPDIR)
	@: > BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.$(OBJEXT):  \
	BloomDBG/$(am__dirstamp) BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_BloomDBG$(EXEEXT): $(BloomDBG_BloomDBG_OBJECTS) $(BloomDBG_BloomDBG_DEPENDENCIES) $(EXTRA_BloomDBG_BloomDBG_DEPENDENCIES) 
	@rm -f BloomDBG_BloomDBG$(EXEEXT)
	$(AM_V_CXXLD)$(BloomDBG_BloomDBG_LINK) $(BloomDBG_BloomDBG_OBJECTS) $(BloomDBG_BloomDBG_LDADD) $(LIBS)
BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.$(OBJEXT):  \
	BloomDBG/$(am__dirstamp) BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_HashAgnosticCascadingBloom$(EXEEXT): $(BloomDBG_HashAgnosticCascadingBloom_OBJECTS) $(BloomDBG_HashAgnosticCascadingBloom_DEPENDENCIES) $(EXTRA_BloomDBG_HashAgnosticCascadingBloom_DEPENDENCIES) 
	@rm -f BloomDBG_HashAgnosticCascadingBloom$(EXEEXT)
	$(AM_V_CXXLD)$(BloomDBG_HashAgnosticCascadingBloom_LINK) $(BloomDBG_HashAgnosticCascadingBloom_OBJECTS) $(BloomDBG_HashAgnosticCascadingBloom_LDADD) $(LIBS)
BloomDBG/MaskedKmerTest.$(OBJEXT): BloomDBG/$(am__dirstamp) \
	BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_MaskedKmer$(EXEEXT): $(BloomDBG_MaskedKmer_OBJECTS) $(BloomDBG_MaskedKmer_DEPENDENCIES) $(EXTRA_BloomDBG_MaskedKmer_DEPENDENCIES) 
	@rm -f BloomDBG_MaskedKmer$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BloomDBG_MaskedKmer_OBJECTS) $(BloomDBG_MaskedKmer_LDADD) $(LIBS)
BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.$(OBJEXT):  \
	BloomDBG/$(am__dirstamp) BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_RollingBloomDBG$(EXEEXT): $(BloomDBG_RollingBloomDBG_OBJECTS) $(BloomDBG_RollingBloomDBG_DEPENDENCIES) $(EXTRA_BloomDBG_RollingBloomDBG_DEPENDENCIES) 
	@rm -f BloomDBG_RollingBloomDBG$(EXEEXT)
	$(AM_V_CXXLD)$(BloomDBG_RollingBloomDBG_LINK) $(BloomDBG_RollingBloomDBG_OBJECTS) $(BloomDBG_RollingBloomDBG_LDADD) $(LIBS)
BloomDBG/RollingHashTest.$(OBJEXT): BloomDBG/$(am__dirstamp) \
	BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_RollingHash$(EXEEXT): $(BloomDBG_RollingHash_OBJECTS) $(BloomDBG_RollingHash_DEPENDENCIES) $(EXTRA_BloomDBG_RollingHash_DEPENDENCIES) 
	@rm -f BloomDBG_RollingHash$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BloomDBG_RollingHash_OBJECTS) $(BloomDBG_RollingHash_LDADD) $(LIBS)
BloomDBG/RollingHashIteratorTest.$(OBJEXT): BloomDBG/$(am__dirstamp) \
	BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_RollingHashIterator$(EXEEXT): $(BloomDBG_RollingHashIterator_OBJECTS) $(BloomDBG_RollingHashIterator_DEPENDENCIES) $(EXTRA_BloomDBG_RollingHashIterator_DEPENDENCIES) 
	@rm -f BloomDBG_RollingHashIterator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BloomDBG_RollingHashIterator_OBJECTS) $(BloomDBG_RollingHashIterator_LDADD) $(LIBS)
BloomDBG/SpacedSeedTest.$(OBJEXT): BloomDBG/$(am__dirstamp) \
	BloomDBG/$(DEPDIR)/$(am__dirstamp)
BloomDBG_SpacedSeed$(EXEEXT): $(BloomDBG_SpacedSeed_OBJECTS) $(BloomDBG_SpacedSeed_DEPENDENCIES) $(EXTRA_BloomDBG_SpacedSeed_DEPENDENCIES) 
	@rm -f BloomDBG_SpacedSeed$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(BloomDBG_SpacedSeed_OBJECTS) $(BloomDBG_SpacedSeed_LDADD) $(LIBS)
Konnector/$(am__dirstamp):
	@$(MKDIR_P) Konnector
	@: > Konnector/$(am__dirstamp)
Konnector/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Konnector/$(DEPDIR)
	@: > Konnector/$(DEPDIR)/$(am__dirstamp)
Konnector/BloomFilter-BloomFilter.$(OBJEXT):  \
	Konnector/$(am__dirstamp) Konnector/$(DEPDIR)/$(am__dirstamp)
BloomFilter$(EXEEXT): $(BloomFilter_OBJECTS) $(BloomFilter_DEPENDENCIES) $(EXTRA_BloomFilter_DEPENDENCIES) 
	@rm -f BloomFilter$(EXEEXT)
	$(AM_V_CXXLD)$(BloomFilter_LINK) $(BloomFilter_OBJECTS) $(BloomFilter_LDADD) $(LIBS)
DBG/$(am__dirstamp):
	@$(MKDIR_P) DBG
	@: > DBG/$(am__dirstamp)
DBG/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) DBG/$(DEPDIR)
	@: > DBG/$(DEPDIR)/$(am__dirstamp)
DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.$(OBJEXT):  \
	DBG/$(am__dirstamp) DBG/$(DEPDIR)/$(am__dirstamp)
DBG_LoadAlgorithm$(EXEEXT): $(DBG_LoadAlgorithm_OBJECTS) $(DBG_LoadAlgorithm_DEPENDENCIES) $(EXTRA_DBG_LoadAlgorithm_DEPENDENCIES) 
	@rm -f DBG_LoadAlgorithm$(EXEEXT)
	$(AM_V_CXXLD)$(DBG_LoadAlgorithm_LINK) $(DBG_LoadAlgorithm_OBJECTS) $(DBG_LoadAlgorithm_LDADD) $(LIBS)
Konnector/Konnector_DBGBloom-DBGBloomTest.$(OBJEXT):  \
	Konnector/$(am__dirstamp) Konnector/$(DEPDIR)/$(am__dirstamp)
Konnector_DBGBloom$(EXEEXT): $(Konnector_DBGBloom_OBJECTS) $(Konnector_DBGBloom_DEPENDENCIES) $(EXTRA_Konnector_DBGBloom_DEPENDENCIES) 
	@rm -f Konnector_DBGBloom$(EXEEXT)
	$(AM_V_CXXLD)$(Konnector_DBGBloom_LINK) $(Konnector_DBGBloom_OBJECTS) $(Konnector_DBGBloom_LDADD) $(LIBS)
Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.$(OBJEXT):  \
	Konnector/$(am__dirstamp) Konnector/$(DEPDIR)/$(am__dirstamp)
Konnector_DBGBloomAlgorithms$(EXEEXT): $(Konnector_DBGBloomAlgorithms_OBJECTS) $(Konnector_DBGBloomAlgorithms_DEPENDENCIES) $(EXTRA_Konnector_DBGBloomAlgorithms_DEPENDENCIES) 
	@rm -f Konnector_DBGBloomAlgorithms$(EXEEXT)
	$(AM_V_CXXLD)$(Konnector_DBGBloomAlgorithms_LINK) $(Konnector_DBGBloomAlgorithms_OBJECTS) $(Konnector_DBGBloomAlgorithms_LDADD) $(LIBS)
Konnector/Konnector_konnector-konnectorTest.$(OBJEXT):  \
	Konnector/$(am__dirstamp) Konnector/$(DEPDIR)/$(am__dirstamp)
Konnector_konnector$(EXEEXT): $(Konnector_konnector_OBJECTS) $(Konnector_konnector_DEPENDENCIES) $(EXTRA_Konnector_konnector_DEPENDENCIES) 
	@rm -f Konnector_konnector$(EXEEXT)
	$(AM_V_CXXLD)$(Konnector_konnector_LINK) $(Konnector_konnector_OBJECTS) $(Konnector_konnector_LDADD) $(LIBS)
PairedDBG/$(am__dirstamp):
	@$(MKDIR_P) PairedDBG
	@: > PairedDBG/$(am__dirstamp)
PairedDBG/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) PairedDBG/$(DEPDIR)
	@: > PairedDBG/$(DEPDIR)/$(am__dirstamp)
PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.$(OBJEXT):  \
	PairedDBG/$(am__dirstamp) PairedDBG/$(DEPDIR)/$(am__dirstamp)
PairedDBG_BranchRecord$(EXEEXT): $(PairedDBG_BranchRecord_OBJECTS) $(PairedDBG_BranchRecord_DEPENDENCIES) $(EXTRA_PairedDBG_BranchRecord_DEPENDENCIES) 
	@rm -f PairedDBG_BranchRecord$(EXEEXT)
	$(AM_V_CXXLD)$(PairedDBG_BranchRecord_LINK) $(PairedDBG_BranchRecord_OBJECTS) $(PairedDBG_BranchRecord_LDADD) $(LIBS)
PairedDBG/PairedDBG_Dinuc-DinucTest.$(OBJEXT):  \
	PairedDBG/$(am__dirstamp) PairedDBG/$(DEPDIR)/$(am__dirstamp)
PairedDBG_Dinuc$(EXEEXT): $(PairedDBG_Dinuc_OBJECTS) $(PairedDBG_Dinuc_DEPENDENCIES) $(EXTRA_PairedDBG_Dinuc_DEPENDENCIES) 
	@rm -f PairedDBG_Dinuc$(EXEEXT)
	$(AM_V_CXXLD)$(PairedDBG_Dinuc_LINK) $(PairedDBG_Dinuc_OBJECTS) $(PairedDBG_Dinuc_LDADD) $(LIBS)
PairedDBG/PairedDBG_KmerPair-KmerPairTest.$(OBJEXT):  \
	PairedDBG/$(am__dirstamp) PairedDBG/$(DEPDIR)/$(am__dirstamp)
PairedDBG_KmerPair$(EXEEXT): $(PairedDBG_KmerPair_OBJECTS) $(PairedDBG_KmerPair_DEPENDENCIES) $(EXTRA_PairedDBG_KmerPair_DEPENDENCIES) 
	@rm -f PairedDBG_KmerPair$(EXEEXT)
	$(AM_V_CXXLD)$(PairedDBG_KmerPair_LINK) $(PairedDBG_KmerPair_OBJECTS) $(PairedDBG_KmerPair_LDADD) $(LIBS)
PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.$(OBJEXT):  \
	PairedDBG/$(am__dirstamp) PairedDBG/$(DEPDIR)/$(am__dirstamp)
PairedDBG_LoadAlgorithm$(EXEEXT): $(PairedDBG_LoadAlgorithm_OBJECTS) $(PairedDBG_LoadAlgorithm_DEPENDENCIES) $(EXTRA_PairedDBG_LoadAlgorithm_DEPENDENCIES) 
	@rm -f PairedDBG_LoadAlgorithm$(EXEEXT)
	$(AM_V_CXXLD)$(PairedDBG_LoadAlgorithm_LINK) $(PairedDBG_LoadAlgorithm_OBJECTS) $(PairedDBG_LoadAlgorithm_LDADD) $(LIBS)
Common/$(am__dirstamp):
	@$(MKDIR_P) Common
	@: > Common/$(am__dirstamp)
Common/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Common/$(DEPDIR)
	@: > Common/$(DEPDIR)/$(am__dirstamp)
Common/KmerIteratorTest.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_KmerIterator$(EXEEXT): $(common_KmerIterator_OBJECTS) $(common_KmerIterator_DEPENDENCIES) $(EXTRA_common_KmerIterator_DEPENDENCIES) 
	@rm -f common_KmerIterator$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_KmerIterator_OBJECTS) $(common_KmerIterator_LDADD) $(LIBS)
Common/BitUtilTest.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_bitutil$(EXEEXT): $(common_bitutil_OBJECTS) $(common_bitutil_DEPENDENCIES) $(EXTRA_common_bitutil_DEPENDENCIES) 
	@rm -f common_bitutil$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_bitutil_OBJECTS) $(common_bitutil_LDADD) $(LIBS)
Common/HistogramTest.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_histogram$(EXEEXT): $(common_histogram_OBJECTS) $(common_histogram_DEPENDENCIES) $(EXTRA_common_histogram_DEPENDENCIES) 
	@rm -f common_histogram$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_histogram_OBJECTS) $(common_histogram_LDADD) $(LIBS)
Common/KmerTest.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_kmer$(EXEEXT): $(common_kmer_OBJECTS) $(common_kmer_DEPENDENCIES) $(EXTRA_common_kmer_DEPENDENCIES) 
	@rm -f common_kmer$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_kmer_OBJECTS) $(common_kmer_LDADD) $(LIBS)
Common/SAM.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_sam$(EXEEXT): $(common_sam_OBJECTS) $(common_sam_DEPENDENCIES) $(EXTRA_common_sam_DEPENDENCIES) 
	@rm -f common_sam$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_sam_OBJECTS) $(common_sam_LDADD) $(LIBS)
Common/Sequence.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_sequence$(EXEEXT): $(common_sequence_OBJECTS) $(common_sequence_DEPENDENCIES) $(EXTRA_common_sequence_DEPENDENCIES) 
	@rm -f common_sequence$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_sequence_OBJECTS) $(common_sequence_LDADD) $(LIBS)
Common/StringUtilTest.$(OBJEXT): Common/$(am__dirstamp) \
	Common/$(DEPDIR)/$(am__dirstamp)
common_stringutil$(EXEEXT): $(common_stringutil_OBJECTS) $(common_stringutil_DEPENDENCIES) $(EXTRA_common_stringutil_DEPENDENCIES) 
	@rm -f common_stringutil$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(common_stringutil_OBJECTS) $(common_stringutil_LDADD) $(LIBS)
Graph/$(am__dirstamp):
	@$(MKDIR_P) Graph
	@: > Graph/$(am__dirstamp)
Graph/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) Graph/$(DEPDIR)
	@: > Graph/$(DEPDIR)/$(am__dirstamp)
Graph/graph_AllPathsSearch-AllPathsSearchTest.$(OBJEXT):  \
	Graph/$(am__dirstamp) Graph/$(DEPDIR)/$(am__dirstamp)
graph_AllPathsSearch$(EXEEXT): $(graph_AllPathsSearch_OBJECTS) $(graph_AllPathsSearch_DEPENDENCIES) $(EXTRA_graph_AllPathsSearch_DEPENDENCIES) 
	@rm -f graph_AllPathsSearch$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_AllPathsSearch_OBJECTS) $(graph_AllPathsSearch_LDADD) $(LIBS)
Graph/graph_BidirectionalBFS-BidirectionalBFSTest.$(OBJEXT):  \
	Graph/$(am__dirstamp) Graph/$(DEPDIR)/$(am__dirstamp)
graph_BidirectionalBFS$(EXEEXT): $(graph_BidirectionalBFS_OBJECTS) $(graph_BidirectionalBFS_DEPENDENCIES) $(EXTRA_graph_BidirectionalBFS_DEPENDENCIES) 
	@rm -f graph_BidirectionalBFS$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_BidirectionalBFS_OBJECTS) $(graph_BidirectionalBFS_LDADD) $(LIBS)
Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.$(OBJEXT):  \
	Graph/$(am__dirstamp) Graph/$(DEPDIR)/$(am__dirstamp)
graph_ConstrainedBFSVisitor$(EXEEXT): $(graph_ConstrainedBFSVisitor_OBJECTS) $(graph_ConstrainedBFSVisitor_DEPENDENCIES) $(EXTRA_graph_ConstrainedBFSVisitor_DEPENDENCIES) 
	@rm -f graph_ConstrainedBFSVisitor$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_ConstrainedBFSVisitor_OBJECTS) $(graph_ConstrainedBFSVisitor_LDADD) $(LIBS)
Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.$(OBJEXT):  \
	Graph/$(am__dirstamp) Graph/$(DEPDIR)/$(am__dirstamp)
graph_ConstrainedBidiBFSVisitor$(EXEEXT): $(graph_ConstrainedBidiBFSVisitor_OBJECTS) $(graph_ConstrainedBidiBFSVisitor_DEPENDENCIES) $(EXTRA_graph_ConstrainedBidiBFSVisitor_DEPENDENCIES) 
	@rm -f graph_ConstrainedBidiBFSVisitor$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_ConstrainedBidiBFSVisitor_OBJECTS) $(graph_ConstrainedBidiBFSVisitor_LDADD) $(LIBS)
Graph/graph_DotIO-DotIOTest.$(OBJEXT): Graph/$(am__dirstamp) \
	Graph/$(DEPDIR)/$(am__dirstamp)
graph_DotIO$(EXEEXT): $(graph_DotIO_OBJECTS) $(graph_DotIO_DEPENDENCIES) $(EXTRA_graph_DotIO_DEPENDENCIES) 
	@rm -f graph_DotIO$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_DotIO_OBJECTS) $(graph_DotIO_LDADD) $(LIBS)
Graph/graph_ExtendPath-ExtendPathTest.$(OBJEXT):  \
	Graph/$(am__dirstamp) Graph/$(DEPDIR)/$(am__dirstamp)
graph_ExtendPath$(EXEEXT): $(graph_ExtendPath_OBJECTS) $(graph_ExtendPath_DEPENDENCIES) $(EXTRA_graph_ExtendPath_DEPENDENCIES) 
	@rm -f graph_ExtendPath$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_ExtendPath_OBJECTS) $(graph_ExtendPath_LDADD) $(LIBS)
Graph/graph_HashGraph-HashGraphTest.$(OBJEXT): Graph/$(am__dirstamp) \
	Graph/$(DEPDIR)/$(am__dirstamp)
graph_HashGraph$(EXEEXT): $(graph_HashGraph_OBJECTS) $(graph_HashGraph_DEPENDENCIES) $(EXTRA_graph_HashGraph_DEPENDENCIES) 
	@rm -f graph_HashGraph$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_HashGraph_OBJECTS) $(graph_HashGraph_LDADD) $(LIBS)
Graph/UndirectedGraphTest.$(OBJEXT): Graph/$(am__dirstamp) \
	Graph/$(DEPDIR)/$(am__dirstamp)
graph_UndirectedGraph$(EXEEXT): $(graph_UndirectedGraph_OBJECTS) $(graph_UndirectedGraph_DEPENDENCIES) $(EXTRA_graph_UndirectedGraph_DEPENDENCIES) 
	@rm -f graph_UndirectedGraph$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(graph_UndirectedGraph_OBJECTS) $(graph_UndirectedGraph_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f BloomDBG/*.$(OBJEXT)
	-rm -f Common/*.$(OBJEXT)
	-rm -f DBG/*.$(OBJEXT)
	-rm -f Graph/*.$(OBJEXT)
	-rm -f Konnector/*.$(OBJEXT)
	-rm -f PairedDBG/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Po
include BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Po
include BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Po
include BloomDBG/$(DEPDIR)/MaskedKmerTest.Po
include BloomDBG/$(DEPDIR)/RollingHashIteratorTest.Po
include BloomDBG/$(DEPDIR)/RollingHashTest.Po
include BloomDBG/$(DEPDIR)/SpacedSeedTest.Po
include Common/$(DEPDIR)/BitUtilTest.Po
include Common/$(DEPDIR)/HistogramTest.Po
include Common/$(DEPDIR)/KmerIteratorTest.Po
include Common/$(DEPDIR)/KmerTest.Po
include Common/$(DEPDIR)/SAM.Po
include Common/$(DEPDIR)/Sequence.Po
include Common/$(DEPDIR)/StringUtilTest.Po
include DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Po
include Graph/$(DEPDIR)/UndirectedGraphTest.Po
include Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Po
include Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Po
include Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Po
include Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Po
include Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Po
include Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Po
include Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Po
include Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Po
include Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Po
include Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Po
include Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Po
include PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Po
include PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Po
include PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Po
include PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Po

.cc.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.o: BloomDBG/BloomDBGTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomDBG_BloomDBG_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_BloomDBG_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.o -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Tpo -c -o BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.o `test -f 'BloomDBG/BloomDBGTest.cpp' || echo '$(srcdir)/'`BloomDBG/BloomDBGTest.cpp
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Po
#	$(AM_V_CXX)source='BloomDBG/BloomDBGTest.cpp' object='BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomDBG_BloomDBG_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_BloomDBG_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.o `test -f 'BloomDBG/BloomDBGTest.cpp' || echo '$(srcdir)/'`BloomDBG/BloomDBGTest.cpp

BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.obj: BloomDBG/BloomDBGTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomDBG_BloomDBG_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_BloomDBG_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.obj -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Tpo -c -o BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.obj `if test -f 'BloomDBG/BloomDBGTest.cpp'; then $(CYGPATH_W) 'BloomDBG/BloomDBGTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/BloomDBGTest.cpp'; fi`
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_BloomDBG-BloomDBGTest.Po
#	$(AM_V_CXX)source='BloomDBG/BloomDBGTest.cpp' object='BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomDBG_BloomDBG_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_BloomDBG_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_BloomDBG-BloomDBGTest.obj `if test -f 'BloomDBG/BloomDBGTest.cpp'; then $(CYGPATH_W) 'BloomDBG/BloomDBGTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/BloomDBGTest.cpp'; fi`

BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.o: BloomDBG/HashAgnosticCascadingBloomTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.o -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Tpo -c -o BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.o `test -f 'BloomDBG/HashAgnosticCascadingBloomTest.cpp' || echo '$(srcdir)/'`BloomDBG/HashAgnosticCascadingBloomTest.cpp
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Po
#	$(AM_V_CXX)source='BloomDBG/HashAgnosticCascadingBloomTest.cpp' object='BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.o `test -f 'BloomDBG/HashAgnosticCascadingBloomTest.cpp' || echo '$(srcdir)/'`BloomDBG/HashAgnosticCascadingBloomTest.cpp

BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.obj: BloomDBG/HashAgnosticCascadingBloomTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.obj -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Tpo -c -o BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.obj `if test -f 'BloomDBG/HashAgnosticCascadingBloomTest.cpp'; then $(CYGPATH_W) 'BloomDBG/HashAgnosticCascadingBloomTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/HashAgnosticCascadingBloomTest.cpp'; fi`
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.Po
#	$(AM_V_CXX)source='BloomDBG/HashAgnosticCascadingBloomTest.cpp' object='BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_HashAgnosticCascadingBloom_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_HashAgnosticCascadingBloom-HashAgnosticCascadingBloomTest.obj `if test -f 'BloomDBG/HashAgnosticCascadingBloomTest.cpp'; then $(CYGPATH_W) 'BloomDBG/HashAgnosticCascadingBloomTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/HashAgnosticCascadingBloomTest.cpp'; fi`

BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.o: BloomDBG/RollingBloomDBGTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_RollingBloomDBG_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.o -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Tpo -c -o BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.o `test -f 'BloomDBG/RollingBloomDBGTest.cpp' || echo '$(srcdir)/'`BloomDBG/RollingBloomDBGTest.cpp
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Po
#	$(AM_V_CXX)source='BloomDBG/RollingBloomDBGTest.cpp' object='BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_RollingBloomDBG_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.o `test -f 'BloomDBG/RollingBloomDBGTest.cpp' || echo '$(srcdir)/'`BloomDBG/RollingBloomDBGTest.cpp

BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.obj: BloomDBG/RollingBloomDBGTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_RollingBloomDBG_CXXFLAGS) $(CXXFLAGS) -MT BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.obj -MD -MP -MF BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Tpo -c -o BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.obj `if test -f 'BloomDBG/RollingBloomDBGTest.cpp'; then $(CYGPATH_W) 'BloomDBG/RollingBloomDBGTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/RollingBloomDBGTest.cpp'; fi`
	$(AM_V_at)$(am__mv) BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Tpo BloomDBG/$(DEPDIR)/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.Po
#	$(AM_V_CXX)source='BloomDBG/RollingBloomDBGTest.cpp' object='BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(BloomDBG_RollingBloomDBG_CXXFLAGS) $(CXXFLAGS) -c -o BloomDBG/BloomDBG_RollingBloomDBG-RollingBloomDBGTest.obj `if test -f 'BloomDBG/RollingBloomDBGTest.cpp'; then $(CYGPATH_W) 'BloomDBG/RollingBloomDBGTest.cpp'; else $(CYGPATH_W) '$(srcdir)/BloomDBG/RollingBloomDBGTest.cpp'; fi`

Konnector/BloomFilter-BloomFilter.o: Konnector/BloomFilter.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomFilter_CPPFLAGS) $(CPPFLAGS) $(BloomFilter_CXXFLAGS) $(CXXFLAGS) -MT Konnector/BloomFilter-BloomFilter.o -MD -MP -MF Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Tpo -c -o Konnector/BloomFilter-BloomFilter.o `test -f 'Konnector/BloomFilter.cc' || echo '$(srcdir)/'`Konnector/BloomFilter.cc
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Tpo Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Po
#	$(AM_V_CXX)source='Konnector/BloomFilter.cc' object='Konnector/BloomFilter-BloomFilter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomFilter_CPPFLAGS) $(CPPFLAGS) $(BloomFilter_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/BloomFilter-BloomFilter.o `test -f 'Konnector/BloomFilter.cc' || echo '$(srcdir)/'`Konnector/BloomFilter.cc

Konnector/BloomFilter-BloomFilter.obj: Konnector/BloomFilter.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomFilter_CPPFLAGS) $(CPPFLAGS) $(BloomFilter_CXXFLAGS) $(CXXFLAGS) -MT Konnector/BloomFilter-BloomFilter.obj -MD -MP -MF Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Tpo -c -o Konnector/BloomFilter-BloomFilter.obj `if test -f 'Konnector/BloomFilter.cc'; then $(CYGPATH_W) 'Konnector/BloomFilter.cc'; else $(CYGPATH_W) '$(srcdir)/Konnector/BloomFilter.cc'; fi`
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Tpo Konnector/$(DEPDIR)/BloomFilter-BloomFilter.Po
#	$(AM_V_CXX)source='Konnector/BloomFilter.cc' object='Konnector/BloomFilter-BloomFilter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(BloomFilter_CPPFLAGS) $(CPPFLAGS) $(BloomFilter_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/BloomFilter-BloomFilter.obj `if test -f 'Konnector/BloomFilter.cc'; then $(CYGPATH_W) 'Konnector/BloomFilter.cc'; else $(CYGPATH_W) '$(srcdir)/Konnector/BloomFilter.cc'; fi`

DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.o: DBG/LoadAlgorithmTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(DBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(DBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -MT DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.o -MD -MP -MF DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Tpo -c -o DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.o `test -f 'DBG/LoadAlgorithmTest.cpp' || echo '$(srcdir)/'`DBG/LoadAlgorithmTest.cpp
	$(AM_V_at)$(am__mv) DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Tpo DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Po
#	$(AM_V_CXX)source='DBG/LoadAlgorithmTest.cpp' object='DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(DBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(DBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -c -o DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.o `test -f 'DBG/LoadAlgorithmTest.cpp' || echo '$(srcdir)/'`DBG/LoadAlgorithmTest.cpp

DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.obj: DBG/LoadAlgorithmTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(DBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(DBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -MT DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.obj -MD -MP -MF DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Tpo -c -o DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.obj `if test -f 'DBG/LoadAlgorithmTest.cpp'; then $(CYGPATH_W) 'DBG/LoadAlgorithmTest.cpp'; else $(CYGPATH_W) '$(srcdir)/DBG/LoadAlgorithmTest.cpp'; fi`
	$(AM_V_at)$(am__mv) DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Tpo DBG/$(DEPDIR)/DBG_LoadAlgorithm-LoadAlgorithmTest.Po
#	$(AM_V_CXX)source='DBG/LoadAlgorithmTest.cpp' object='DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(DBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(DBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -c -o DBG/DBG_LoadAlgorithm-LoadAlgorithmTest.obj `if test -f 'DBG/LoadAlgorithmTest.cpp'; then $(CYGPATH_W) 'DBG/LoadAlgorithmTest.cpp'; else $(CYGPATH_W) '$(srcdir)/DBG/LoadAlgorithmTest.cpp'; fi`

Konnector/Konnector_DBGBloom-DBGBloomTest.o: Konnector/DBGBloomTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloom_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloom_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_DBGBloom-DBGBloomTest.o -MD -MP -MF Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Tpo -c -o Konnector/Konnector_DBGBloom-DBGBloomTest.o `test -f 'Konnector/DBGBloomTest.cpp' || echo '$(srcdir)/'`Konnector/DBGBloomTest.cpp
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Tpo Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Po
#	$(AM_V_CXX)source='Konnector/DBGBloomTest.cpp' object='Konnector/Konnector_DBGBloom-DBGBloomTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloom_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloom_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_DBGBloom-DBGBloomTest.o `test -f 'Konnector/DBGBloomTest.cpp' || echo '$(srcdir)/'`Konnector/DBGBloomTest.cpp

Konnector/Konnector_DBGBloom-DBGBloomTest.obj: Konnector/DBGBloomTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloom_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloom_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_DBGBloom-DBGBloomTest.obj -MD -MP -MF Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Tpo -c -o Konnector/Konnector_DBGBloom-DBGBloomTest.obj `if test -f 'Konnector/DBGBloomTest.cpp'; then $(CYGPATH_W) 'Konnector/DBGBloomTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/DBGBloomTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Tpo Konnector/$(DEPDIR)/Konnector_DBGBloom-DBGBloomTest.Po
#	$(AM_V_CXX)source='Konnector/DBGBloomTest.cpp' object='Konnector/Konnector_DBGBloom-DBGBloomTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloom_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloom_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_DBGBloom-DBGBloomTest.obj `if test -f 'Konnector/DBGBloomTest.cpp'; then $(CYGPATH_W) 'Konnector/DBGBloomTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/DBGBloomTest.cpp'; fi`

Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.o: Konnector/DBGBloomAlgorithmsTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloomAlgorithms_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloomAlgorithms_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.o -MD -MP -MF Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Tpo -c -o Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.o `test -f 'Konnector/DBGBloomAlgorithmsTest.cpp' || echo '$(srcdir)/'`Konnector/DBGBloomAlgorithmsTest.cpp
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Tpo Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Po
#	$(AM_V_CXX)source='Konnector/DBGBloomAlgorithmsTest.cpp' object='Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloomAlgorithms_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloomAlgorithms_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.o `test -f 'Konnector/DBGBloomAlgorithmsTest.cpp' || echo '$(srcdir)/'`Konnector/DBGBloomAlgorithmsTest.cpp

Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.obj: Konnector/DBGBloomAlgorithmsTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloomAlgorithms_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloomAlgorithms_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.obj -MD -MP -MF Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Tpo -c -o Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.obj `if test -f 'Konnector/DBGBloomAlgorithmsTest.cpp'; then $(CYGPATH_W) 'Konnector/DBGBloomAlgorithmsTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/DBGBloomAlgorithmsTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Tpo Konnector/$(DEPDIR)/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.Po
#	$(AM_V_CXX)source='Konnector/DBGBloomAlgorithmsTest.cpp' object='Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_DBGBloomAlgorithms_CPPFLAGS) $(CPPFLAGS) $(Konnector_DBGBloomAlgorithms_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_DBGBloomAlgorithms-DBGBloomAlgorithmsTest.obj `if test -f 'Konnector/DBGBloomAlgorithmsTest.cpp'; then $(CYGPATH_W) 'Konnector/DBGBloomAlgorithmsTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/DBGBloomAlgorithmsTest.cpp'; fi`

Konnector/Konnector_konnector-konnectorTest.o: Konnector/konnectorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_konnector_CPPFLAGS) $(CPPFLAGS) $(Konnector_konnector_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_konnector-konnectorTest.o -MD -MP -MF Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Tpo -c -o Konnector/Konnector_konnector-konnectorTest.o `test -f 'Konnector/konnectorTest.cpp' || echo '$(srcdir)/'`Konnector/konnectorTest.cpp
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Tpo Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Po
#	$(AM_V_CXX)source='Konnector/konnectorTest.cpp' object='Konnector/Konnector_konnector-konnectorTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_konnector_CPPFLAGS) $(CPPFLAGS) $(Konnector_konnector_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_konnector-konnectorTest.o `test -f 'Konnector/konnectorTest.cpp' || echo '$(srcdir)/'`Konnector/konnectorTest.cpp

Konnector/Konnector_konnector-konnectorTest.obj: Konnector/konnectorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_konnector_CPPFLAGS) $(CPPFLAGS) $(Konnector_konnector_CXXFLAGS) $(CXXFLAGS) -MT Konnector/Konnector_konnector-konnectorTest.obj -MD -MP -MF Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Tpo -c -o Konnector/Konnector_konnector-konnectorTest.obj `if test -f 'Konnector/konnectorTest.cpp'; then $(CYGPATH_W) 'Konnector/konnectorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/konnectorTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Tpo Konnector/$(DEPDIR)/Konnector_konnector-konnectorTest.Po
#	$(AM_V_CXX)source='Konnector/konnectorTest.cpp' object='Konnector/Konnector_konnector-konnectorTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(Konnector_konnector_CPPFLAGS) $(CPPFLAGS) $(Konnector_konnector_CXXFLAGS) $(CXXFLAGS) -c -o Konnector/Konnector_konnector-konnectorTest.obj `if test -f 'Konnector/konnectorTest.cpp'; then $(CYGPATH_W) 'Konnector/konnectorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Konnector/konnectorTest.cpp'; fi`

PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.o: PairedDBG/BranchRecordTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_BranchRecord_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_BranchRecord_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.o -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Tpo -c -o PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.o `test -f 'PairedDBG/BranchRecordTest.cpp' || echo '$(srcdir)/'`PairedDBG/BranchRecordTest.cpp
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Po
#	$(AM_V_CXX)source='PairedDBG/BranchRecordTest.cpp' object='PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_BranchRecord_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_BranchRecord_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.o `test -f 'PairedDBG/BranchRecordTest.cpp' || echo '$(srcdir)/'`PairedDBG/BranchRecordTest.cpp

PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.obj: PairedDBG/BranchRecordTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_BranchRecord_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_BranchRecord_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.obj -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Tpo -c -o PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.obj `if test -f 'PairedDBG/BranchRecordTest.cpp'; then $(CYGPATH_W) 'PairedDBG/BranchRecordTest.cpp'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/BranchRecordTest.cpp'; fi`
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_BranchRecord-BranchRecordTest.Po
#	$(AM_V_CXX)source='PairedDBG/BranchRecordTest.cpp' object='PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_BranchRecord_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_BranchRecord_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_BranchRecord-BranchRecordTest.obj `if test -f 'PairedDBG/BranchRecordTest.cpp'; then $(CYGPATH_W) 'PairedDBG/BranchRecordTest.cpp'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/BranchRecordTest.cpp'; fi`

PairedDBG/PairedDBG_Dinuc-DinucTest.o: PairedDBG/DinucTest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_Dinuc_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_Dinuc_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_Dinuc-DinucTest.o -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Tpo -c -o PairedDBG/PairedDBG_Dinuc-DinucTest.o `test -f 'PairedDBG/DinucTest.cc' || echo '$(srcdir)/'`PairedDBG/DinucTest.cc
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Po
#	$(AM_V_CXX)source='PairedDBG/DinucTest.cc' object='PairedDBG/PairedDBG_Dinuc-DinucTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_Dinuc_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_Dinuc_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_Dinuc-DinucTest.o `test -f 'PairedDBG/DinucTest.cc' || echo '$(srcdir)/'`PairedDBG/DinucTest.cc

PairedDBG/PairedDBG_Dinuc-DinucTest.obj: PairedDBG/DinucTest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_Dinuc_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_Dinuc_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_Dinuc-DinucTest.obj -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Tpo -c -o PairedDBG/PairedDBG_Dinuc-DinucTest.obj `if test -f 'PairedDBG/DinucTest.cc'; then $(CYGPATH_W) 'PairedDBG/DinucTest.cc'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/DinucTest.cc'; fi`
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_Dinuc-DinucTest.Po
#	$(AM_V_CXX)source='PairedDBG/DinucTest.cc' object='PairedDBG/PairedDBG_Dinuc-DinucTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_Dinuc_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_Dinuc_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_Dinuc-DinucTest.obj `if test -f 'PairedDBG/DinucTest.cc'; then $(CYGPATH_W) 'PairedDBG/DinucTest.cc'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/DinucTest.cc'; fi`

PairedDBG/PairedDBG_KmerPair-KmerPairTest.o: PairedDBG/KmerPairTest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_KmerPair_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_KmerPair_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_KmerPair-KmerPairTest.o -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Tpo -c -o PairedDBG/PairedDBG_KmerPair-KmerPairTest.o `test -f 'PairedDBG/KmerPairTest.cc' || echo '$(srcdir)/'`PairedDBG/KmerPairTest.cc
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Po
#	$(AM_V_CXX)source='PairedDBG/KmerPairTest.cc' object='PairedDBG/PairedDBG_KmerPair-KmerPairTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_KmerPair_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_KmerPair_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_KmerPair-KmerPairTest.o `test -f 'PairedDBG/KmerPairTest.cc' || echo '$(srcdir)/'`PairedDBG/KmerPairTest.cc

PairedDBG/PairedDBG_KmerPair-KmerPairTest.obj: PairedDBG/KmerPairTest.cc
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_KmerPair_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_KmerPair_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_KmerPair-KmerPairTest.obj -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Tpo -c -o PairedDBG/PairedDBG_KmerPair-KmerPairTest.obj `if test -f 'PairedDBG/KmerPairTest.cc'; then $(CYGPATH_W) 'PairedDBG/KmerPairTest.cc'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/KmerPairTest.cc'; fi`
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_KmerPair-KmerPairTest.Po
#	$(AM_V_CXX)source='PairedDBG/KmerPairTest.cc' object='PairedDBG/PairedDBG_KmerPair-KmerPairTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_KmerPair_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_KmerPair_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_KmerPair-KmerPairTest.obj `if test -f 'PairedDBG/KmerPairTest.cc'; then $(CYGPATH_W) 'PairedDBG/KmerPairTest.cc'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/KmerPairTest.cc'; fi`

PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.o: PairedDBG/LoadAlgorithmTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.o -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Tpo -c -o PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.o `test -f 'PairedDBG/LoadAlgorithmTest.cpp' || echo '$(srcdir)/'`PairedDBG/LoadAlgorithmTest.cpp
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Po
#	$(AM_V_CXX)source='PairedDBG/LoadAlgorithmTest.cpp' object='PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.o `test -f 'PairedDBG/LoadAlgorithmTest.cpp' || echo '$(srcdir)/'`PairedDBG/LoadAlgorithmTest.cpp

PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.obj: PairedDBG/LoadAlgorithmTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -MT PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.obj -MD -MP -MF PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Tpo -c -o PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.obj `if test -f 'PairedDBG/LoadAlgorithmTest.cpp'; then $(CYGPATH_W) 'PairedDBG/LoadAlgorithmTest.cpp'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/LoadAlgorithmTest.cpp'; fi`
	$(AM_V_at)$(am__mv) PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Tpo PairedDBG/$(DEPDIR)/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.Po
#	$(AM_V_CXX)source='PairedDBG/LoadAlgorithmTest.cpp' object='PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(PairedDBG_LoadAlgorithm_CPPFLAGS) $(CPPFLAGS) $(PairedDBG_LoadAlgorithm_CXXFLAGS) $(CXXFLAGS) -c -o PairedDBG/PairedDBG_LoadAlgorithm-LoadAlgorithmTest.obj `if test -f 'PairedDBG/LoadAlgorithmTest.cpp'; then $(CYGPATH_W) 'PairedDBG/LoadAlgorithmTest.cpp'; else $(CYGPATH_W) '$(srcdir)/PairedDBG/LoadAlgorithmTest.cpp'; fi`

Graph/graph_AllPathsSearch-AllPathsSearchTest.o: Graph/AllPathsSearchTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_AllPathsSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_AllPathsSearch-AllPathsSearchTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Tpo -c -o Graph/graph_AllPathsSearch-AllPathsSearchTest.o `test -f 'Graph/AllPathsSearchTest.cpp' || echo '$(srcdir)/'`Graph/AllPathsSearchTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Tpo Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Po
#	$(AM_V_CXX)source='Graph/AllPathsSearchTest.cpp' object='Graph/graph_AllPathsSearch-AllPathsSearchTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_AllPathsSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_AllPathsSearch-AllPathsSearchTest.o `test -f 'Graph/AllPathsSearchTest.cpp' || echo '$(srcdir)/'`Graph/AllPathsSearchTest.cpp

Graph/graph_AllPathsSearch-AllPathsSearchTest.obj: Graph/AllPathsSearchTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_AllPathsSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_AllPathsSearch-AllPathsSearchTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Tpo -c -o Graph/graph_AllPathsSearch-AllPathsSearchTest.obj `if test -f 'Graph/AllPathsSearchTest.cpp'; then $(CYGPATH_W) 'Graph/AllPathsSearchTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/AllPathsSearchTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Tpo Graph/$(DEPDIR)/graph_AllPathsSearch-AllPathsSearchTest.Po
#	$(AM_V_CXX)source='Graph/AllPathsSearchTest.cpp' object='Graph/graph_AllPathsSearch-AllPathsSearchTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_AllPathsSearch_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_AllPathsSearch-AllPathsSearchTest.obj `if test -f 'Graph/AllPathsSearchTest.cpp'; then $(CYGPATH_W) 'Graph/AllPathsSearchTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/AllPathsSearchTest.cpp'; fi`

Graph/graph_BidirectionalBFS-BidirectionalBFSTest.o: Graph/BidirectionalBFSTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_BidirectionalBFS_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_BidirectionalBFS-BidirectionalBFSTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Tpo -c -o Graph/graph_BidirectionalBFS-BidirectionalBFSTest.o `test -f 'Graph/BidirectionalBFSTest.cpp' || echo '$(srcdir)/'`Graph/BidirectionalBFSTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Tpo Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Po
#	$(AM_V_CXX)source='Graph/BidirectionalBFSTest.cpp' object='Graph/graph_BidirectionalBFS-BidirectionalBFSTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_BidirectionalBFS_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_BidirectionalBFS-BidirectionalBFSTest.o `test -f 'Graph/BidirectionalBFSTest.cpp' || echo '$(srcdir)/'`Graph/BidirectionalBFSTest.cpp

Graph/graph_BidirectionalBFS-BidirectionalBFSTest.obj: Graph/BidirectionalBFSTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_BidirectionalBFS_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_BidirectionalBFS-BidirectionalBFSTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Tpo -c -o Graph/graph_BidirectionalBFS-BidirectionalBFSTest.obj `if test -f 'Graph/BidirectionalBFSTest.cpp'; then $(CYGPATH_W) 'Graph/BidirectionalBFSTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/BidirectionalBFSTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Tpo Graph/$(DEPDIR)/graph_BidirectionalBFS-BidirectionalBFSTest.Po
#	$(AM_V_CXX)source='Graph/BidirectionalBFSTest.cpp' object='Graph/graph_BidirectionalBFS-BidirectionalBFSTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_BidirectionalBFS_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_BidirectionalBFS-BidirectionalBFSTest.obj `if test -f 'Graph/BidirectionalBFSTest.cpp'; then $(CYGPATH_W) 'Graph/BidirectionalBFSTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/BidirectionalBFSTest.cpp'; fi`

Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.o: Graph/ConstrainedBFSVisitorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Tpo -c -o Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.o `test -f 'Graph/ConstrainedBFSVisitorTest.cpp' || echo '$(srcdir)/'`Graph/ConstrainedBFSVisitorTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Tpo Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Po
#	$(AM_V_CXX)source='Graph/ConstrainedBFSVisitorTest.cpp' object='Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.o `test -f 'Graph/ConstrainedBFSVisitorTest.cpp' || echo '$(srcdir)/'`Graph/ConstrainedBFSVisitorTest.cpp

Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.obj: Graph/ConstrainedBFSVisitorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Tpo -c -o Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.obj `if test -f 'Graph/ConstrainedBFSVisitorTest.cpp'; then $(CYGPATH_W) 'Graph/ConstrainedBFSVisitorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ConstrainedBFSVisitorTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Tpo Graph/$(DEPDIR)/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.Po
#	$(AM_V_CXX)source='Graph/ConstrainedBFSVisitorTest.cpp' object='Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ConstrainedBFSVisitor-ConstrainedBFSVisitorTest.obj `if test -f 'Graph/ConstrainedBFSVisitorTest.cpp'; then $(CYGPATH_W) 'Graph/ConstrainedBFSVisitorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ConstrainedBFSVisitorTest.cpp'; fi`

Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.o: Graph/ConstrainedBidiBFSVisitorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBidiBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Tpo -c -o Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.o `test -f 'Graph/ConstrainedBidiBFSVisitorTest.cpp' || echo '$(srcdir)/'`Graph/ConstrainedBidiBFSVisitorTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Tpo Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Po
#	$(AM_V_CXX)source='Graph/ConstrainedBidiBFSVisitorTest.cpp' object='Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBidiBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.o `test -f 'Graph/ConstrainedBidiBFSVisitorTest.cpp' || echo '$(srcdir)/'`Graph/ConstrainedBidiBFSVisitorTest.cpp

Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.obj: Graph/ConstrainedBidiBFSVisitorTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBidiBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Tpo -c -o Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.obj `if test -f 'Graph/ConstrainedBidiBFSVisitorTest.cpp'; then $(CYGPATH_W) 'Graph/ConstrainedBidiBFSVisitorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ConstrainedBidiBFSVisitorTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Tpo Graph/$(DEPDIR)/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.Po
#	$(AM_V_CXX)source='Graph/ConstrainedBidiBFSVisitorTest.cpp' object='Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ConstrainedBidiBFSVisitor_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ConstrainedBidiBFSVisitor-ConstrainedBidiBFSVisitorTest.obj `if test -f 'Graph/ConstrainedBidiBFSVisitorTest.cpp'; then $(CYGPATH_W) 'Graph/ConstrainedBidiBFSVisitorTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ConstrainedBidiBFSVisitorTest.cpp'; fi`

Graph/graph_DotIO-DotIOTest.o: Graph/DotIOTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_DotIO_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_DotIO-DotIOTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Tpo -c -o Graph/graph_DotIO-DotIOTest.o `test -f 'Graph/DotIOTest.cpp' || echo '$(srcdir)/'`Graph/DotIOTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Tpo Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Po
#	$(AM_V_CXX)source='Graph/DotIOTest.cpp' object='Graph/graph_DotIO-DotIOTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_DotIO_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_DotIO-DotIOTest.o `test -f 'Graph/DotIOTest.cpp' || echo '$(srcdir)/'`Graph/DotIOTest.cpp

Graph/graph_DotIO-DotIOTest.obj: Graph/DotIOTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_DotIO_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_DotIO-DotIOTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Tpo -c -o Graph/graph_DotIO-DotIOTest.obj `if test -f 'Graph/DotIOTest.cpp'; then $(CYGPATH_W) 'Graph/DotIOTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/DotIOTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Tpo Graph/$(DEPDIR)/graph_DotIO-DotIOTest.Po
#	$(AM_V_CXX)source='Graph/DotIOTest.cpp' object='Graph/graph_DotIO-DotIOTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_DotIO_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_DotIO-DotIOTest.obj `if test -f 'Graph/DotIOTest.cpp'; then $(CYGPATH_W) 'Graph/DotIOTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/DotIOTest.cpp'; fi`

Graph/graph_ExtendPath-ExtendPathTest.o: Graph/ExtendPathTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ExtendPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ExtendPath-ExtendPathTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Tpo -c -o Graph/graph_ExtendPath-ExtendPathTest.o `test -f 'Graph/ExtendPathTest.cpp' || echo '$(srcdir)/'`Graph/ExtendPathTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Tpo Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Po
#	$(AM_V_CXX)source='Graph/ExtendPathTest.cpp' object='Graph/graph_ExtendPath-ExtendPathTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ExtendPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ExtendPath-ExtendPathTest.o `test -f 'Graph/ExtendPathTest.cpp' || echo '$(srcdir)/'`Graph/ExtendPathTest.cpp

Graph/graph_ExtendPath-ExtendPathTest.obj: Graph/ExtendPathTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ExtendPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_ExtendPath-ExtendPathTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Tpo -c -o Graph/graph_ExtendPath-ExtendPathTest.obj `if test -f 'Graph/ExtendPathTest.cpp'; then $(CYGPATH_W) 'Graph/ExtendPathTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ExtendPathTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Tpo Graph/$(DEPDIR)/graph_ExtendPath-ExtendPathTest.Po
#	$(AM_V_CXX)source='Graph/ExtendPathTest.cpp' object='Graph/graph_ExtendPath-ExtendPathTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_ExtendPath_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_ExtendPath-ExtendPathTest.obj `if test -f 'Graph/ExtendPathTest.cpp'; then $(CYGPATH_W) 'Graph/ExtendPathTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/ExtendPathTest.cpp'; fi`

Graph/graph_HashGraph-HashGraphTest.o: Graph/HashGraphTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_HashGraph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_HashGraph-HashGraphTest.o -MD -MP -MF Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Tpo -c -o Graph/graph_HashGraph-HashGraphTest.o `test -f 'Graph/HashGraphTest.cpp' || echo '$(srcdir)/'`Graph/HashGraphTest.cpp
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Tpo Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Po
#	$(AM_V_CXX)source='Graph/HashGraphTest.cpp' object='Graph/graph_HashGraph-HashGraphTest.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_HashGraph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_HashGraph-HashGraphTest.o `test -f 'Graph/HashGraphTest.cpp' || echo '$(srcdir)/'`Graph/HashGraphTest.cpp

Graph/graph_HashGraph-HashGraphTest.obj: Graph/HashGraphTest.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_HashGraph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Graph/graph_HashGraph-HashGraphTest.obj -MD -MP -MF Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Tpo -c -o Graph/graph_HashGraph-HashGraphTest.obj `if test -f 'Graph/HashGraphTest.cpp'; then $(CYGPATH_W) 'Graph/HashGraphTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/HashGraphTest.cpp'; fi`
	$(AM_V_at)$(am__mv) Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Tpo Graph/$(DEPDIR)/graph_HashGraph-HashGraphTest.Po
#	$(AM_V_CXX)source='Graph/HashGraphTest.cpp' object='Graph/graph_HashGraph-HashGraphTest.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(graph_HashGraph_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Graph/graph_HashGraph-HashGraphTest.obj `if test -f 'Graph/HashGraphTest.cpp'; then $(CYGPATH_W) 'Graph/HashGraphTest.cpp'; else $(CYGPATH_W) '$(srcdir)/Graph/HashGraphTest.cpp'; fi`

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# exand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	else \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
common_stringutil.log: common_stringutil$(EXEEXT)
	@p='common_stringutil$(EXEEXT)'; \
	b='common_stringutil'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_histogram.log: common_histogram$(EXEEXT)
	@p='common_histogram$(EXEEXT)'; \
	b='common_histogram'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_bitutil.log: common_bitutil$(EXEEXT)
	@p='common_bitutil$(EXEEXT)'; \
	b='common_bitutil'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_kmer.log: common_kmer$(EXEEXT)
	@p='common_kmer$(EXEEXT)'; \
	b='common_kmer'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_sequence.log: common_sequence$(EXEEXT)
	@p='common_sequence$(EXEEXT)'; \
	b='common_sequence'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_KmerIterator.log: common_KmerIterator$(EXEEXT)
	@p='common_KmerIterator$(EXEEXT)'; \
	b='common_KmerIterator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
common_sam.log: common_sam$(EXEEXT)
	@p='common_sam$(EXEEXT)'; \
	b='common_sam'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomFilter.log: BloomFilter$(EXEEXT)
	@p='BloomFilter$(EXEEXT)'; \
	b='BloomFilter'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Konnector_DBGBloom.log: Konnector_DBGBloom$(EXEEXT)
	@p='Konnector_DBGBloom$(EXEEXT)'; \
	b='Konnector_DBGBloom'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Konnector_DBGBloomAlgorithms.log: Konnector_DBGBloomAlgorithms$(EXEEXT)
	@p='Konnector_DBGBloomAlgorithms$(EXEEXT)'; \
	b='Konnector_DBGBloomAlgorithms'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_ConstrainedBFSVisitor.log: graph_ConstrainedBFSVisitor$(EXEEXT)
	@p='graph_ConstrainedBFSVisitor$(EXEEXT)'; \
	b='graph_ConstrainedBFSVisitor'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_BidirectionalBFS.log: graph_BidirectionalBFS$(EXEEXT)
	@p='graph_BidirectionalBFS$(EXEEXT)'; \
	b='graph_BidirectionalBFS'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_AllPathsSearch.log: graph_AllPathsSearch$(EXEEXT)
	@p='graph_AllPathsSearch$(EXEEXT)'; \
	b='graph_AllPathsSearch'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_HashGraph.log: graph_HashGraph$(EXEEXT)
	@p='graph_HashGraph$(EXEEXT)'; \
	b='graph_HashGraph'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_ConstrainedBidiBFSVisitor.log: graph_ConstrainedBidiBFSVisitor$(EXEEXT)
	@p='graph_ConstrainedBidiBFSVisitor$(EXEEXT)'; \
	b='graph_ConstrainedBidiBFSVisitor'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_ExtendPath.log: graph_ExtendPath$(EXEEXT)
	@p='graph_ExtendPath$(EXEEXT)'; \
	b='graph_ExtendPath'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_DotIO.log: graph_DotIO$(EXEEXT)
	@p='graph_DotIO$(EXEEXT)'; \
	b='graph_DotIO'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
graph_UndirectedGraph.log: graph_UndirectedGraph$(EXEEXT)
	@p='graph_UndirectedGraph$(EXEEXT)'; \
	b='graph_UndirectedGraph'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
Konnector_konnector.log: Konnector_konnector$(EXEEXT)
	@p='Konnector_konnector$(EXEEXT)'; \
	b='Konnector_konnector'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
DBG_LoadAlgorithm.log: DBG_LoadAlgorithm$(EXEEXT)
	@p='DBG_LoadAlgorithm$(EXEEXT)'; \
	b='DBG_LoadAlgorithm'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
PairedDBG_LoadAlgorithm.log: PairedDBG_LoadAlgorithm$(EXEEXT)
	@p='PairedDBG_LoadAlgorithm$(EXEEXT)'; \
	b='PairedDBG_LoadAlgorithm'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
PairedDBG_KmerPair.log: PairedDBG_KmerPair$(EXEEXT)
	@p='PairedDBG_KmerPair$(EXEEXT)'; \
	b='PairedDBG_KmerPair'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
PairedDBG_Dinuc.log: PairedDBG_Dinuc$(EXEEXT)
	@p='PairedDBG_Dinuc$(EXEEXT)'; \
	b='PairedDBG_Dinuc'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
PairedDBG_BranchRecord.log: PairedDBG_BranchRecord$(EXEEXT)
	@p='PairedDBG_BranchRecord$(EXEEXT)'; \
	b='PairedDBG_BranchRecord'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_BloomDBG.log: BloomDBG_BloomDBG$(EXEEXT)
	@p='BloomDBG_BloomDBG$(EXEEXT)'; \
	b='BloomDBG_BloomDBG'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_RollingHash.log: BloomDBG_RollingHash$(EXEEXT)
	@p='BloomDBG_RollingHash$(EXEEXT)'; \
	b='BloomDBG_RollingHash'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_RollingHashIterator.log: BloomDBG_RollingHashIterator$(EXEEXT)
	@p='BloomDBG_RollingHashIterator$(EXEEXT)'; \
	b='BloomDBG_RollingHashIterator'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_HashAgnosticCascadingBloom.log: BloomDBG_HashAgnosticCascadingBloom$(EXEEXT)
	@p='BloomDBG_HashAgnosticCascadingBloom$(EXEEXT)'; \
	b='BloomDBG_HashAgnosticCascadingBloom'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_RollingBloomDBG.log: BloomDBG_RollingBloomDBG$(EXEEXT)
	@p='BloomDBG_RollingBloomDBG$(EXEEXT)'; \
	b='BloomDBG_RollingBloomDBG'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_MaskedKmer.log: BloomDBG_MaskedKmer$(EXEEXT)
	@p='BloomDBG_MaskedKmer$(EXEEXT)'; \
	b='BloomDBG_MaskedKmer'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
BloomDBG_SpacedSeed.log: BloomDBG_SpacedSeed$(EXEEXT)
	@p='BloomDBG_SpacedSeed$(EXEEXT)'; \
	b='BloomDBG_SpacedSeed'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.test.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.test$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(TEST_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_TEST_LOG_DRIVER_FLAGS) $(TEST_LOG_DRIVER_FLAGS) -- $(TEST_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f BloomDBG/$(DEPDIR)/$(am__dirstamp)
	-rm -f BloomDBG/$(am__dirstamp)
	-rm -f Common/$(DEPDIR)/$(am__dirstamp)
	-rm -f Common/$(am__dirstamp)
	-rm -f DBG/$(DEPDIR)/$(am__dirstamp)
	-rm -f DBG/$(am__dirstamp)
	-rm -f Graph/$(DEPDIR)/$(am__dirstamp)
	-rm -f Graph/$(am__dirstamp)
	-rm -f Konnector/$(DEPDIR)/$(am__dirstamp)
	-rm -f Konnector/$(am__dirstamp)
	-rm -f PairedDBG/$(DEPDIR)/$(am__dirstamp)
	-rm -f PairedDBG/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf BloomDBG/$(DEPDIR) Common/$(DEPDIR) DBG/$(DEPDIR) Graph/$(DEPDIR) Konnector/$(DEPDIR) PairedDBG/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf BloomDBG/$(DEPDIR) Common/$(DEPDIR) DBG/$(DEPDIR) Graph/$(DEPDIR) Konnector/$(DEPDIR) PairedDBG/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	recheck tags tags-am uninstall uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
